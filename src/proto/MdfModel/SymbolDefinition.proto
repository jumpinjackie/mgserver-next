syntax = "proto3";
option java_package="org.osgeo.mapguide.mdfmodel";
package MdfModel;

/**
 * SymbolDefinition.proto
 *
 * Protobuf message definitions for Symbol definitions
 *
 * Based on SymbolDefinition-2.4.0.xsd
 */

import "MdfModel/MdfCommon.proto";

message SymbolDefinition {
    oneof type {
        SimpleSymbolDefinition simple = 1;
        CompoundSymbolDefinition compound = 2;
    }
}

message SimpleSymbolDefinition {
    // The name of the symbol
    string name = 1;
    // An optional description of the symbol
    string description = 2;
    // The collection of graphic elements defining this symbol
    repeated Graphics graphics = 3;
    // The optional box used to resize and reposition select graphic elements.  The graphical extent of all elements with ResizeControl set to AddToResizeBox will be added to this box, potentially causing it to grow in size.  Any change in size causes all elements with ResizeControl set to AdjustToResizeBox to be proportionally resized and repositioned
    ResizeBox resize_box = 4;
    // Specifies how the symbol is used in the context of point features
    PointUsage point_usage = 5;
    // Specifies how the symbol is used in the context of linear features
    LineUsage line_usage = 6;
    // Specifies how the symbol is used in the context of area features
    AreaUsage area_usage = 7;
    // The list of parameters used in this symbol.  If a parameter is not listed here this is considered a bug in the symbol definition
    repeated Parameter parameters = 8;
}

// A symbol definition specified using a collection of SimpleSymbolDefinition elements or references
message CompoundSymbolDefinition {
    // The name of the symbol
    string name = 1;
    // An optional description of the symbol
    string description = 2;
    repeated SimpleSymbol simple_symbols = 3;
}

// A collection of graphic elements
message Graphics {
    // Specifies how this graphic element interacts with the resize box.  This must evaluate to one of: ResizeNone (default), AddToResizeBox, or AdjustToResizeBox.  AddToResizeBox means the element's graphical extent is added to the resize box, but the element is not resized or repositioned if the resize box grows.  AdjustToResizeBox means the element is resized and repositioned relative to the resize box, but its extent is not added to the box.  ResizeNone means the element does not interact with the resize box
    string resize_control = 1;
    oneof type {
        Path path = 2;
        Image image = 3;
        Text text = 4;
    }
}

// A 2D path defining vector geometry to include in the symbol definition
message Path {
    // The path geometry.  The format is a sequence of segments, each represented by a letter indicating the segment type followed by one or more parameters.  Uppercase letters denote absolute values and lowercase letters denote relative values.  Segment types can be one of "M" (moveto), "L" (lineto), "H" (horizontal lineto), "V" (vertical lineto), "A" (arcto), or "Z" (close segment)
    string geometry = 1;
    // The amount to scale the path geometry in the horizontal direction. This is only applied to the Geometry element. Defaults to 1 if not specified
    string scale_x = 2;
    // The amount to scale the path geometry in the vertical direction. This is only applied to the Geometry element. Defaults to 1 if not specified
    string scale_y = 3;
    // The ARGB color used to fill the path.  If this element is missing or empty then no fill is applied to the path
    string fill_color = 4;
    // The ARGB color used to draw the path outline.  If this element is missing or empty then no path outline is drawn
    string line_color = 5;
    // The weight to use when drawing the path outline, in mm.  If specified this must be greater than or equal to zero.  Defaults to 0
    string line_weight = 6;
    // Boolean value which specifies whether the line weight scales with the symbol.  This behavior is independent of the symbol's size context.  This must evaluate to True (default) or False
    string line_weight_scalable = 7;
    // The cap type to use at the ends of each segment in the path outline.  This must evaluate to one of: None, Round (default), Triangle, or Square
    string line_cap = 8;
    // The join type to use at each vertex in the path outline.  This must evaluate to one of: None, Bevel, Round (default), or Miter
    string line_join = 9;
    // The limit to use when drawing miter joins.  A miter join is trimmed if the ratio of the miter length to line weight is greater than the miter limit.  If specified this must be greater than zero.  Defaults to 5
    string line_miter_limit = 10;
}

message Image {
    oneof type {
        // An embedded PNG image stored using base64 binary
        bytes content = 1;
        // A library reference to a PNG image
        ResourceDataItemRef reference = 2;
    }
    // The width of the image, in mm.  This must be greater than zero
    string size_x = 3;
    // The height of the image, in mm.  This must be greater than zero
    string size_y = 4;
    // Boolean value which specifies whether the image sizes scale with the symbol.  This behavior is independent of the symbol's size context.  This must evaluate to True (default) or False
    string size_scalable = 5;
    // The angle of the image in symbol space, in degrees.  Defaults to 0
    string angle = 6;
    // The x-coordinate of the image center in symbol space, in mm.  Defaults to 0
    string position_x = 7;
    // The y-coordinate of the image center in symbol space, in mm.  Defaults to 0
    string posiiton_y = 8;
}

// A text string to include in the symbol definition
message Text {
    // The string content for the text
    string content = 1;
    // The name of the font to use for the text
    string font_name = 2;
    // Specifies if the text should be drawn using a bold font.  This must evaluate to True or False (default)
    string bold = 3;
    // Specifies if the text should be drawn using an italic font.  This must evaluate to True or False (default)
    string italic = 4;
    // Specifies if the text should be underlined.  This must evaluate to True or False (default)
    string underlined = 5;
    // Specifies if the text should be overlined.  This must evaluate to True or False (default)
    string overlined = 6;
    // A numeric value between -85.0 and 85.0 representing the angle in degrees forward (for positive) or backwards (for negative) that the text should be obliqued (a la shear or skew transform).  Defaults to 0
    string oblique_angle = 7;
    // A numeric value between 0.75 and 10.0, representing the text "tracking" factor to apply to inter-character spacing, effectively a multiplier of each character's advance width.  Values less than 1.0 condense the text, spacing individual characters closer together than normally dictated by the font, whereas values greater than 1.0 expand the text, spacing characters farther apart.  The outline of individual characters is not altered by this element, only the spacing between them and adjacent characters.  Defaults to 1
    string track_spacing = 8;
    // The height of the text, in mm.  If specified this must be greater than zero.  Defaults to 4
    string height = 9;
    // Boolean value which specifies whether the font height scales with the symbol.  This behavior is independent of the symbol's size context.  This must evaluate to True (default) or False
    string height_scalable = 10;
    // The angle of the text in symbol space, in degrees.  Defaults to 0
    string angle = 11;
    // The x-coordinate of the text in symbol space, in mm.  Horizontal alignment of the text box is relative to this coordinate.  Defaults to 0
    string position_x = 12;
    // The y-coordinate of the text in symbol space, in mm.  Vertical alignment of the text box is relative to this coordinate.  Defaults to 0
    string position_y = 13;
    // The horizontal alignment of the text box relative to its position.  This must evaluate to one of: Left, Center (default), or Right
    string horizontal_alignment = 14;
    // The vertical alignment of the text box relative to its position.  This must evaluate to one of: Bottom, Baseline, Halfline (default), Capline, or Top
    string vertical_alignment = 15;
    // The horizontal justification of individual lines of text in a multi-line text string.  This must evaluate to one of: Left, Center, Right, Justified, or FromAlignment (default)
    string justification = 16;
    // The spacing between individual lines of text in a multi-line text string, as a multiple of the font height.  If specified this must be greater than zero.  Defaults to 1.05
    string line_spacing = 17;
    // The ARGB color used to draw the text.  Defaults to black (ff000000)
    string text_color = 18;
    // The ARGB color used to draw the ghosted text.  If this element is missing or empty then no ghosting is drawn
    string ghost_color = 19;
    // If specified, defines the kind of frame drawn around the text
    TextFrame frame = 20;
    // The markup format of the string content.  Defaults to 'Plain'
    string markup = 21;
}

// Defines a frame used with text elements
message TextFrame {
    // The ARGB color used to draw the text frame border.  If this element is missing or empty then no frame border is drawn
    string line_color = 1;
    // The ARGB color used to fill the text frame.  If this element is missing or empty then no fill is drawn
    string fill_color = 2;
    // The additional horizontal offset of the frame relative to the text box, in mm.  Defaults to 0
    string offset_x = 3;
    // The additional vertical offset of the frame relative to the text box, in mm.  Defaults to 0
    string offset_y = 4;
}

// Defines a library resource data item reference
message ResourceDataItemRef {
    // The reference to the resource
    string resource_id = 1;
    // If ResourceId specifies a library, this identifies the name of a library item
    string library_item_name = 2;
}

// Defines a resize box used with SimpleSymbolDefinitions
message ResizeBox {
    // The initial width of the resize box, in mm.  This must be greater than or equal to zero
    string size_x = 1;
    // The initial height of the resize box, in mm.  This must be greater than or equal to zero
    string size_y = 2;
    // The initial x-coordinate of the resize box center, in mm
    string position_x = 3;
    // The initial y-coordinate of the resize box center, in mm
    string position_y = 4;
    // Specifies how the resize box grows in size.  This must evaluate to one of: GrowInX, GrowInY, GrowInXY, or GrowInXYMaintainAspect (default)
    string grow_control = 5;
}

// Specifies how a symbol is used in the context of point features
message PointUsage {
    // Specifies how the symbol angle is defined.  This must evaluate to one of: FromAngle (default) or FromGeometry
    string angle_control = 1;
    // Specifies the symbol angle, in degrees.  If AngleControl evaluates to FromAngle then this specifies the absolute angle of the symbol.  If AngleControl evaluates to FromGeometry then this specifies the symbol angle relative to the geometry.  Defaults to 0
    string angle = 2;
    // Specifies the horizontal offset to apply to the symbol origin, in mm.  This offset is applied before the symbol is scaled and rotated.  Defaults to 0
    string origin_offset_x = 3;
    // Specifies the vertical offset to apply to the symbol origin, in mm.  This offset is applied before the symbol is scaled and rotated.  Defaults to 0
    string origin_offset_y = 4;
}

// Specifies how a symbol is used in the context of linear features
message LineUsage {
    // Specifies how the symbol angle is defined.  This must evaluate to one of: FromAngle (default) or FromGeometry
    string angle_control = 1;
    // Specifies whether the distribution parameters are interpreted as absolute values (in mm) or parametric values.  This must evaluate to one of: Absolute (default) or Parametric
    string units_control = 2;
    // Specifies the symbol behavior at vertices.  This must evaluate to one of: OverlapNone, OverlapDirect, or OverlapWrap (default)
    string vertex_control = 3;
    // Specifies the angle of each repeating symbol, in degrees.  If AngleControl evaluates to FromAngle then this specifies the absolute angle of the symbol.  If AngleControl evaluates to FromGeometry then this specifies the symbol angle relative to the geometry.  Defaults to 0
    string angle = 4;
    // Specifies where the symbol distribution begins, relative to the start of the feature.  If specified this must be greater than or equal to zero
    string start_offset = 5;
    // Specifies where the symbol distribution ends, relative to the end of the feature.  If specified this must be greater than or equal to zero
    string end_offset = 6;
    // Specifies the separation between repeating symbols.  Defaults to 0
    string repeat = 7;
    // Specifies the limiting angle, in degrees, by a which the feature geometry can change before some of the VertexControl options take effect.  If specified this must be greater than or equal to zero.  Defaults to 0
    string vertex_angle_limit = 8;
    // Specifies the wrapping behavior at vertices for all graphic elements.  Only applies if VertexControl evaluates to OverlapWrap.  This must evaluate to one of: None, Bevel, Round (default), or Miter
    string vertex_join = 9;
    // The limit to use when drawing miter vertex joins.  A miter vertex join is trimmed if the ratio of the miter length to symbol height is greater than the miter limit.  If specified this must be greater than zero.  Defaults to 5
    string vertex_miter_limit = 10;
    // Specifies the default path attributes to use when drawing the symbol.  These apply to any centerline that gets drawn where the symbol can't draw, and to path elements that don't specify attributes.  The geometry contained in this path is ignored and should be empty
    string default_path = 11;
}

// Specifies how a symbol is used in the context of area features
message AreaUsage {
    // Specifies how the symbol angle is defined.  This must evaluate to one of: FromAngle (default) or FromGeometry
    string angle_control = 1;
    // Specifies how the symbol grid origin is defined.  This must evaluate to one of: Global (default), Local, or Centroid
    string origin_control = 2;
    // Specifies the clipping behavior of the symbol at polygon boundaries.  This must evaluate to one of: Clip (default), Inside, or Overlap
    string clipping_control = 3;
    // Specifies the angle of each repeating symbol, in degrees.  If AngleControl evaluates to FromAngle then this specifies the absolute angle of the symbol.  If AngleControl evaluates to FromGeometry then this specifies the symbol angle relative to the geometry.  Defaults to 0
    string angle = 4;
    // The x-coordinate of the symbol grid origin, in mm.  Only applies if OriginControl evaluates to Global or Local.  Defaults to 0
    string origin_x = 5;
    // The y-coordinate of the symbol grid origin, in mm.  Only applies if OriginControl evaluates to Global or Local.  Defaults to 0
    string origin_y = 6;
    // The horizontal separation between symbols, in mm.  Defaults to 0
    string repeat_x = 7;
    // The vertical separation between symbo9ls, in mm.  Defaults to 0
    string repeat_y = 8;
    // The width, in mm, of the buffer zone relative to the polygon boundary in which the symbol is rendered.  Defaults to 0.
    string buffer_width = 9;
}

// The metadata for a symbol parameter
message Parameter {
    // The parameter identifier as used in the symbol
    string identifier = 1;
    // The default value of the parameter if no override is defined in the symbol instance.  This can be an expression
    string default_value = 2;
    // An optional short description of the parameter.  This can be used, for example, to ask the user to specify a parameter value
    string display_name = 3;
    // An optional long description of the parameter.  This might include a description of useful values for this parameter
    string description = 4;
    // An optional explicit declaration of data type or data usage context.  This is a hint used by the UI when assigning a value to this parameter.  Defaults to String
    DataType data_type = 5;
}

// Defines a reference to a SimpleSymbolDefinition, either inlined or a library reference
message SimpleSymbol {
    oneof type {
        // An inlined SimpleSymbolDefinition
        SimpleSymbolDefinition simple_symbol_definition = 1;
        // A library reference to an existing SimpleSymbolDefinition
        string resource_id = 2;
    }
    // The optional rendering pass in which this symbol definition draws.  If specified this must be greater than or equal to zero.  Defaults to 0
    string rendering_pass = 3;
}

// Enumerates the allowed GrowControl values
enum GrowControl {
    GrowControl_GrowInX = 0;
    GrowControl_GrowInY = 1;
    GrowControl_GrowInXY = 2;
    GrowControl_GrowInXYMaintainAspect = 3;
}

// Enumerates the allowed AngleControl values
enum AngleControl {
    AngleControl_FromAngle = 0;
    AngleControl_FromGeometry = 1;
}

// Enumerates the allowed UnitsControl values
enum UnitsControl {
    UnitsControl_Absolute = 0;
    UnitsControl_Parametric = 1;
}

// Enumerates the allowed VertexControl values
enum VertexControl {
    VertexControl_OverlapNone = 0;
    VertexControl_OverlapDirect = 1;
    VertexControl_OverlapWrap = 2;
}

enum VertexJoin {
    VertexJoin_None = 0;
    VertexJoin_Bevel = 1;
    VertexJoin_Round = 2;
    VertexJoin_Miter = 3;
}

enum OriginControl {
    OriginContext_Global = 0;
    OriginContext_Local = 1;
    OriginContext_Centroid = 2;
}

enum ClippingControl {
    ClippingControl_Clip = 0;
    ClippingControl_Inside = 1;
    ClippingControl_Overlap = 2;
}

enum ResizeControl {
    ResizeControl_ResizeNone = 0;
    ResizeControl_AddToResizeBox = 1;
    ResizeControl_AdjustToResizeBox = 2;
}

enum LineCap {
    LineCap_None = 0;
    LineCap_Round = 1;
    LineCap_Triangle = 2;
    LineCap_Square = 3;
}

enum LineJoin {
    LineJoin_None = 0;
    LineJoin_Bevel = 1;
    LineJoin_Round = 2;
    LineJoin_Miter = 3;
}

enum HorizontalAlignment {
    HorizontalAlignment_Left = 0;
    HorizontalAlignment_Center = 1;
    HorizontalAlignment_Right = 2;
}

enum VerticalAlignment {
    VerticalAlignment_Bottom = 0;
    VerticalAlignment_Baseline = 1;
    VerticalAlignment_Halfline = 2;
    VerticalAlignment_Capline = 3;
    VerticalAlignment_Top = 4;
}

enum Justification {
    Justification_Left = 0;
    Justification_Center = 1;
    Justification_Right = 2;
    Justification_Justified = 3;
    Justification_FromAlignment = 4;
}

enum DataType {
    DataType_String = 0;
    DataType_Boolean = 1;
    DataType_Integer = 2;
    DataType_Real = 3;
    DataType_Color = 4;
    DataType_Angle = 5;
    DataType_FillColor = 6;
    DataType_LineColor = 7;
    DataType_LineWeight = 8;
    DataType_Content = 9;
    DataType_Markup = 10;
    DataType_FontName = 11;
    DataType_Bold = 12;
    DataType_Italic = 13;
    DataType_Underlined = 14;
    DataType_Overlined = 15;
    DataType_ObliqueAngle = 16;
    DataType_TrackSpacing = 17;
    DataType_FontHeight = 18;
    DataType_HorizontalAlignment = 19;
    DataType_VerticalAlignment = 20;
    DataType_Justification = 21;
    DataType_LineSpacing = 22;
    DataType_TextColor = 23;
    DataType_GhostColor = 24;
    DataType_FrameLineColor = 25;
    DataType_FrameFillColor = 26;
    DataType_StartOffset = 27;
    DataType_EndOffset = 28;
    DataType_RepeatX = 29;
    DataType_RepeatY = 30;
}
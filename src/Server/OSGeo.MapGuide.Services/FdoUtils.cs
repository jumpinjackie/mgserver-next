using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using OSGeo.FDO.Commands.Feature;
using OSGeo.FDO.Common;

namespace OSGeo.MapGuide.Services
{
    public class FdoUtils
    {
        public static ClassDefinition ConvertFdoClass(FDO.Schema.ClassDefinition clsDef)
        {
            var klass = new ClassDefinition
            {
                Name = clsDef.Name,
                Description = clsDef.Description
            };
            var clsProps = clsDef.Properties;
            foreach (FDO.Schema.PropertyDefinition p in clsProps)
            {
                var convProp = ConvertFdoProperty(p);
                if (convProp != null)
                    klass.Properties.Add(convProp);
            }
            var idProps = clsDef.IdentityProperties;
            foreach (FDO.Schema.DataPropertyDefinition p in idProps)
            {
                klass.IdentityPropertyNames.Add(p.Name);
            }
            var fc = clsDef as FDO.Schema.FeatureClass;
            if (fc != null)
            {
                var geomProp = fc.GeometryProperty;
                if (geomProp != null)
                {
                    klass.GeometryPropertyName = geomProp.Name;
                }
            }
            return klass;
        }

        static FdoDataType ConvertDataType(FDO.Schema.DataType dt)
        {
            switch(dt)
            {
                case FDO.Schema.DataType.DataType_BLOB:
                    return FdoDataType.Blob;
                case FDO.Schema.DataType.DataType_Boolean:
                    return FdoDataType.Boolean;
                case FDO.Schema.DataType.DataType_Byte:
                    return FdoDataType.Byte;
                case FDO.Schema.DataType.DataType_CLOB:
                    return FdoDataType.Clob;
                case FDO.Schema.DataType.DataType_DateTime:
                    return FdoDataType.DateTime;
                case FDO.Schema.DataType.DataType_Decimal:
                    return FdoDataType.Decimal;
                case FDO.Schema.DataType.DataType_Double:
                    return FdoDataType.Double;
                case FDO.Schema.DataType.DataType_Int16:
                    return FdoDataType.Int16;
                case FDO.Schema.DataType.DataType_Int32:
                    return FdoDataType.Int32;
                case FDO.Schema.DataType.DataType_Int64:
                    return FdoDataType.Int64;
                case FDO.Schema.DataType.DataType_Single:
                    return FdoDataType.Single;
                case FDO.Schema.DataType.DataType_String:
                    return FdoDataType.String;
            }
            throw new ArgumentOutOfRangeException(nameof(dt));
        }

        public static PropertyDefinition ConvertFdoProperty(FDO.Schema.PropertyDefinition propDef)
        {
            var pd = new PropertyDefinition
            {
                Name = propDef.Name,
                Description = propDef.Description
            };
            switch (propDef.PropertyType)
            {
                case FDO.Schema.PropertyType.PropertyType_DataProperty:
                    {
                        var dp = (FDO.Schema.DataPropertyDefinition)propDef;
                        pd.Data = new DataPropertyDefinition
                        {
                            DataType = ConvertDataType(dp.DataType),
                            DecimalPrecision = dp.Precision,
                            DecimalScale = dp.Scale,
                            IsAutoGenerated = dp.IsAutoGenerated,
                            IsNullable = dp.Nullable,
                            IsReadOnly = dp.ReadOnly,
                            StringLength = dp.Length
                        };
                        return pd;
                    }
                case FDO.Schema.PropertyType.PropertyType_GeometricProperty:
                    {
                        var gp = (FDO.Schema.GeometricPropertyDefinition)propDef;
                        pd.Geom = new GeometricPropertyDefinition
                        {
                            GeometryType = ConvertGeometryType((FDO.Schema.GeometricType)gp.GeometryTypes),
                            HasElevation = gp.HasElevation,
                            IsReadOnly = gp.ReadOnly,
                            SpatialContext = gp.SpatialContextAssociation
                        };
                        pd.Geom.SpecificGeometryType.AddRange(ConvertSpecificGeometryTypes(gp.SpecificGeometryTypes));
                        return pd;
                    }
                case FDO.Schema.PropertyType.PropertyType_RasterProperty:
                    {
                        var rp = (FDO.Schema.RasterPropertyDefinition)propDef;
                        pd.Raster = new RasterPropertyDefinition
                        {
                            ImageXSize = rp.DefaultImageXSize,
                            ImageYSize = rp.DefaultImageYSize,
                            IsNullable = rp.Nullable,
                            IsReadOnly = rp.ReadOnly,
                            SpatialContext = rp.SpatialContextAssociation
                        };
                        return pd;
                    }
                default:
                    return null;
            }
        }

        private static IEnumerable<FdoSpecificGeometryType> ConvertSpecificGeometryTypes(GeometryType[] specificGeometryTypes)
        {
            foreach (var sgt in specificGeometryTypes)
            {
                switch (sgt)
                {
                    case GeometryType.GeometryType_CurvePolygon:
                        yield return FdoSpecificGeometryType.CurvePolygon;
                        break;
                    case GeometryType.GeometryType_CurveString:
                        yield return FdoSpecificGeometryType.CurveString;
                        break;
                    case GeometryType.GeometryType_LineString:
                        yield return FdoSpecificGeometryType.LineString;
                        break;
                    case GeometryType.GeometryType_MultiCurvePolygon:
                        yield return FdoSpecificGeometryType.MultiCurvePolygon;
                        break;
                    case GeometryType.GeometryType_MultiCurveString:
                        yield return FdoSpecificGeometryType.MultiCurveString;
                        break;
                    case GeometryType.GeometryType_MultiGeometry:
                        yield return FdoSpecificGeometryType.MultiGeometry;
                        break;
                    case GeometryType.GeometryType_MultiLineString:
                        yield return FdoSpecificGeometryType.MultiLineString;
                        break;
                    case GeometryType.GeometryType_MultiPoint:
                        yield return FdoSpecificGeometryType.MultiPoint;
                        break;
                    case GeometryType.GeometryType_MultiPolygon:
                        yield return FdoSpecificGeometryType.MultiPolygon;
                        break;
                    case GeometryType.GeometryType_Point:
                        yield return FdoSpecificGeometryType.Point;
                        break;
                    case GeometryType.GeometryType_Polygon:
                        yield return FdoSpecificGeometryType.Polygon;
                        break;
                    default:
                        yield return FdoSpecificGeometryType.None;
                        break;
                }
            }
        }

        private static FdoGeometryType ConvertGeometryType(FDO.Schema.GeometricType geometryTypes)
        {
            switch (geometryTypes)
            {
                case FDO.Schema.GeometricType.GeometricType_All:
                    return FdoGeometryType.All;
                case FDO.Schema.GeometricType.GeometricType_Curve:
                    return FdoGeometryType.Curves;
                case FDO.Schema.GeometricType.GeometricType_Point:
                    return FdoGeometryType.Points;
                case FDO.Schema.GeometricType.GeometricType_Solid:
                    return FdoGeometryType.Solids;
                case FDO.Schema.GeometricType.GeometricType_Surface:
                    return FdoGeometryType.Surfaces;
            }
            return FdoGeometryType.Unknown;
        }

        internal static FeatureRecord ConvertFeatureRecord(IFeatureReader reader, ClassDefinition klass)
        {
            var record = new FeatureRecord();
            foreach (var prop in klass.Properties)
            {
                if (reader.IsNull(prop.Name))
                {
                    record.Values.Add(new PropertyValue { Name = prop.Name });
                }
                else
                {
                    switch(prop.PropertyTypeCase)
                    {
                        case PropertyDefinition.PropertyTypeOneofCase.Data:
                            {
                                switch (prop.Data.DataType)
                                {
                                    case FdoDataType.Blob:
                                        break;
                                    case FdoDataType.Boolean:
                                        record.Values.Add(new PropertyValue { Name = prop.Name, BoolValue = reader.GetBoolean(prop.Name) });
                                        break;
                                    case FdoDataType.Byte:
                                        record.Values.Add(new PropertyValue { Name = prop.Name, ByteValue = reader.GetByte(prop.Name) });
                                        break;
                                    case FdoDataType.Clob:
                                        break;
                                    case FdoDataType.DateTime:
                                        var dt = reader.GetDateTime(prop.Name);
                                        record.Values.Add(new PropertyValue { Name = prop.Name, DateTimeValue = dt.ToString() });
                                        break;
                                    case FdoDataType.Decimal:
                                        record.Values.Add(new PropertyValue { Name = prop.Name, DecimalValue = reader.GetDouble(prop.Name) });
                                        break;
                                    case FdoDataType.Double:
                                        record.Values.Add(new PropertyValue { Name = prop.Name, DoubleValue = reader.GetDouble(prop.Name) });
                                        break;
                                    case FdoDataType.Int16:
                                        record.Values.Add(new PropertyValue { Name = prop.Name, Int16Value = reader.GetInt16(prop.Name) });
                                        break;
                                    case FdoDataType.Int32:
                                        record.Values.Add(new PropertyValue { Name = prop.Name, Int32Value = reader.GetInt32(prop.Name) });
                                        break;
                                    case FdoDataType.Int64:
                                        record.Values.Add(new PropertyValue { Name = prop.Name, Int64Value = reader.GetInt64(prop.Name) });
                                        break;
                                    case FdoDataType.Single:
                                        record.Values.Add(new PropertyValue { Name = prop.Name, SingleValue = reader.GetSingle(prop.Name) });
                                        break;
                                    case FdoDataType.String:
                                        record.Values.Add(new PropertyValue { Name = prop.Name, StringValue = reader.GetString(prop.Name) });
                                        break;
                                }
                            }
                            break;
                        case PropertyDefinition.PropertyTypeOneofCase.Geom:
                            break;
                    }
                }
            }
            return record;
        }

        internal static DataRecord ConvertDataRecord(IDataReader reader, DataRecordHeader header)
        {
            var record = new DataRecord();
            foreach (var prop in header.Properties)
            {
                if (reader.IsNull(prop.Name))
                {
                    record.Values.Add(new PropertyValue { Name = prop.Name });
                }
                else
                {
                    switch (prop.PropertyType)
                    {
                        case FdoLogicalPropertyType.DataBlob:
                            break;
                        case FdoLogicalPropertyType.DataBoolean:
                            record.Values.Add(new PropertyValue { Name = prop.Name, BoolValue = reader.GetBoolean(prop.Name) });
                            break;
                        case FdoLogicalPropertyType.DataByte:
                            record.Values.Add(new PropertyValue { Name = prop.Name, ByteValue = reader.GetByte(prop.Name) });
                            break;
                        case FdoLogicalPropertyType.DataClob:
                            break;
                        case FdoLogicalPropertyType.DataDateTime:
                            var dt = reader.GetDateTime(prop.Name);
                            record.Values.Add(new PropertyValue { Name = prop.Name, DateTimeValue = dt.ToString() });
                            break;
                        case FdoLogicalPropertyType.DataDecimal:
                            record.Values.Add(new PropertyValue { Name = prop.Name, DecimalValue = reader.GetDouble(prop.Name) });
                            break;
                        case FdoLogicalPropertyType.DataDouble:
                            record.Values.Add(new PropertyValue { Name = prop.Name, DoubleValue = reader.GetDouble(prop.Name) });
                            break;
                        case FdoLogicalPropertyType.DataInt16:
                            record.Values.Add(new PropertyValue { Name = prop.Name, Int16Value = reader.GetInt16(prop.Name) });
                            break;
                        case FdoLogicalPropertyType.DataInt32:
                            record.Values.Add(new PropertyValue { Name = prop.Name, Int32Value = reader.GetInt32(prop.Name) });
                            break;
                        case FdoLogicalPropertyType.DataInt64:
                            record.Values.Add(new PropertyValue { Name = prop.Name, Int64Value = reader.GetInt64(prop.Name) });
                            break;
                        case FdoLogicalPropertyType.DataSingle:
                            record.Values.Add(new PropertyValue { Name = prop.Name, SingleValue = reader.GetSingle(prop.Name) });
                            break;
                        case FdoLogicalPropertyType.DataString:
                            record.Values.Add(new PropertyValue { Name = prop.Name, StringValue = reader.GetString(prop.Name) });
                            break;
                    }
                }
            }
            return record;
        }

        internal static DataRecordHeader ConvertHeader(IDataReader reader)
        {
            var header = new DataRecordHeader();

            for (int i = 0; i < reader.GetPropertyCount(); i++)
            {
                string name = reader.GetPropertyName(i);
                switch (reader.GetPropertyType(i))
                {
                    case FDO.Schema.PropertyType.PropertyType_DataProperty:
                        {
                            switch(reader.GetDataType(i))
                            {
                                case FDO.Schema.DataType.DataType_BLOB:
                                    break;
                                case FDO.Schema.DataType.DataType_Boolean:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataBoolean });
                                    break;
                                case FDO.Schema.DataType.DataType_Byte:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataByte });
                                    break;
                                case FDO.Schema.DataType.DataType_CLOB:
                                    break;
                                case FDO.Schema.DataType.DataType_DateTime:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataDateTime });
                                    break;
                                case FDO.Schema.DataType.DataType_Decimal:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataDecimal });
                                    break;
                                case FDO.Schema.DataType.DataType_Double:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataDouble });
                                    break;
                                case FDO.Schema.DataType.DataType_Int16:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataInt16 });
                                    break;
                                case FDO.Schema.DataType.DataType_Int32:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataInt32 });
                                    break;
                                case FDO.Schema.DataType.DataType_Int64:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataInt64 });
                                    break;
                                case FDO.Schema.DataType.DataType_Single:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataSingle });
                                    break;
                                case FDO.Schema.DataType.DataType_String:
                                    header.Properties.Add(new DataPropertyDescriptor { Name = name, PropertyType = FdoLogicalPropertyType.DataString });
                                    break;
                            }
                        }
                        break;
                    case FDO.Schema.PropertyType.PropertyType_GeometricProperty:
                        break;
                }
            }

            return header;
        }
    }
}

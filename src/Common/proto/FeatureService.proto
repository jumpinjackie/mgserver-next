syntax = "proto3";
option csharp_namespace = "OSGeo.MapGuide";

import "ServiceCommon.proto";

message CreateFeatureSourceRequest {
    /*required*/ string fdo_provider = 1;
    /*required*/ string file_name = 2;
    /*required*/ FeatureSchema schema = 3;
    /*required*/ SpatialContext spatial_context = 4;
}

message ApplySchemaRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ FeatureSchema schema = 2;
}

message BeginTransactionRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
}

message BeginTransactionResponse {
    Error error = 1; //An error if one was raised by the service operation
    TransactionRef result = 2;
}

message DeleteFeaturesRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string class_name = 2;
    /*required*/ string filter = 3;
    TransactionRef transaction = 4;
}

message DeleteFeaturesResponse {
    Error error = 1; //An error if one was raised by the service operation
    int32 result = 2;
}

message DescribeSchemaRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string schema_name = 2;
    StringCollection class_names = 3;
}

message DescribeSchemaResponse {
    Error error = 1; //An error if one was raised by the service operation
    repeated FeatureSchema result = 2;
}

message EnumerateDataStoresRequest {
    /*required*/ string fdo_provider = 1;
    /*required*/ string connection_string = 2;
}

message EnumerateDataStoresResponse {
    Error error = 1; //An error if one was raised by the service operation
    /*required*/ StringCollection result = 2;
}

message ExecuteSqlNonQueryRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string sql = 2;
    ParameterCollection parameters = 3;
    TransactionRef transaction = 4;
}

message ExecuteSqlNonQueryResponse {
    Error error = 1; //An error if one was raised by the service operation
    /*required*/ int32 result = 2;
}

message ExecuteSqlQueryRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string sql = 2;
    ParameterCollection parameters = 3;
    TransactionRef transaction = 4;
}

message GetCapabilitiesRequest {
    /*required*/ string fdo_provider = 1;
    string connection_string = 2;
}

message GetCapabilitiesResponse {
    Error error = 1; //An error if one was raised by the service operation
    FdoProviderCapabilities result = 2;
}

message GetClassDefinitionRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string schema_name = 2;
    /*required*/ string class_name = 3;
}

message GetClassDefinitionResponse {
    Error error = 1; //An error if one was raised by the service operation
    ClassDefinition result = 2;
}

message GetClassesRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string schema_name = 2;
}

message GetClassesResponse {
    Error error = 1; //An error if one was raised by the service operation
    StringCollection result = 2;
}

message GetConnectionPropertyValuesRequest {
    /*required*/ string fdo_provider = 1;
    /*required*/ string property_name = 2;
    string connection_string = 3;
}

message GetConnectionPropertyValuesResponse {
    Error error = 1; //An error if one was raised by the service operation
    StringCollection result = 2;
}

message GetFeatureProvidersRequest {

}

message GetFeatureProvidersResponse {
    Error error = 1; //An error if one was raised by the service operation
    repeated FdoProviderInfo result = 2;
}

message GetLockedFeaturesRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
}

message GetLongTransactionsRequest {

}

message GetLongTransactionsResponse {
    /*required*/ Error error = 1; //An error if one was raised by the service operation
    repeated StringCollection result = 2;
}

message GetSchemaMappingRequest {
    /*required*/ string fdo_provider = 1;
    string connection_string = 2;
}

message GetSchemaMappingResponse {
    Error error = 1; //An error if one was raised by the service operation
    FdoDataStoreConfiguration result = 2;
}

message GetSchemasRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
}

message GetSchemasResponse {
    Error error = 1; //An error if one was raised by the service operation
    StringCollection result = 2;
}

message GetSpatialContextRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
}

message GetSpatialContextResponse {
    Error error = 1; //An error if one was raised by the service operation
    repeated SpatialContext result = 2;
}

enum SpatialContextExtentType {
    Static = 0;
    Dynamic = 1;
}

message SpatialContext {
    /*required*/ string name = 1;
    string coordinate_system = 2;
    string coordinate_system_wkt = 3;
    string description = 4;
    Envelope extent = 5;
    /*required*/ SpatialContextExtentType extent_type = 6;
    /*required*/ double xy_tolerance = 7;
    /*required*/ double z_tolerance = 8;
}

message InsertFeaturesRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
}

message InsertFeaturesResponse {
    Error error = 1; //An error if one was raised by the service operation
    repeated FeatureRecord result = 2;
}

message SelectAggregateRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string class_name = 2;
    /*required*/ AggregateQueryOptions options = 3;
}

message SelectFeaturesRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string class_name = 2;
    FeatureQueryOptions options = 3;
}

message SetLongTransactionRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string name = 2;
}

message SetLongTransactionResponse {
    Error error = 1; //An error if one was raised by the service operation
}

message TestConnectionRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    ///*required*/ string fdo_provider = 2;
    ///*required*/ string connection_string = 3;
}

message TestConnectionResponse {
    Error error = 1;
    bool result = 2;
}

message UpdateFeaturesRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    repeated FeatureCommand commands = 2;
    TransactionRef transaction = 3;
}

message UpdateFeaturesResponse {
    Error error = 1; //An error if one was raised by the service operation
    repeated PropertyValue result = 2;
}

message UpdateMatchingFeaturesRequest {
    /*required*/ ResourceIdentifier feature_source = 1;
    /*required*/ string class_name = 2;
    repeated PropertyValue properties = 3;
    string filter = 4;
}

message UpdateMatchingFeaturesResponse {
    Error error = 1; //An error if one was raised by the service operation
    int32 result = 2;
}

service MgFeatureService {
    rpc ApplySchema (ApplySchemaRequest) returns (BasicResponse);
    rpc BeginTransaction (BeginTransactionRequest) returns (BeginTransactionResponse);
    rpc CreateFeatureSource (CreateFeatureSourceRequest) returns (BasicResponse);
    rpc DeleteFeatures (DeleteFeaturesRequest) returns (DeleteFeaturesResponse);
    rpc DescribeSchema (DescribeSchemaRequest) returns (DescribeSchemaResponse);
    //rpc DescribeWfsFeatureType (DescribeWfsFeatureTypeRequest) returns (DescribeWfsFeatureTypeResponse);
    rpc EnumerateDataStores (EnumerateDataStoresRequest) returns (EnumerateDataStoresResponse);
    rpc ExecuteSqlNonQuery (ExecuteSqlNonQueryRequest) returns (ExecuteSqlNonQueryResponse);
    rpc ExecuteSqlQuery (ExecuteSqlQueryRequest) returns (stream DataRecord);
    rpc GetCapabilities (GetCapabilitiesRequest) returns (GetCapabilitiesResponse);
    rpc GetClassDefinition (GetClassDefinitionRequest) returns (GetClassDefinitionResponse);
    rpc GetClasses (GetClassesRequest) returns (GetClassesResponse);
    rpc GetConnectionPropertyValues (GetConnectionPropertyValuesRequest) returns (GetConnectionPropertyValuesResponse);
    rpc GetFeatureProviders (GetFeatureProvidersRequest) returns (GetFeatureProvidersResponse);
    rpc GetLockedFeatures (GetLockedFeaturesRequest) returns (stream FeatureRecord);
    rpc GetLongTransactions (GetLongTransactionsRequest) returns (GetLongTransactionsResponse);
    rpc GetSchemaMapping (GetSchemaMappingRequest) returns (GetSchemaMappingResponse);
    rpc GetSchemas (GetSchemasRequest) returns (GetSchemasResponse);
    rpc GetSpatialContext (GetSpatialContextRequest) returns (GetSpatialContextResponse);
    //rpc GetWfsFeature (GetWfsFeatureRequest) returns (GetWfsFeatureResponse);
    rpc InsertFeatures (InsertFeaturesRequest) returns (stream FeatureRecord);
    rpc SelectAggregate (SelectAggregateRequest) returns (stream DataRecord);
    rpc SelectFeatures (SelectFeaturesRequest) returns (stream FeatureRecord);
    rpc SetLongTransaction (SetLongTransactionRequest) returns (SetLongTransactionResponse);
    rpc TestConnection (TestConnectionRequest) returns (TestConnectionResponse);
    rpc UpdateFeatures (UpdateFeaturesRequest) returns (UpdateFeaturesResponse);
    rpc UpdateMatchingFeatures (UpdateMatchingFeaturesRequest) returns (UpdateMatchingFeaturesResponse);
}